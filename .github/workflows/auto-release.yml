name: Auto Release Plugins

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      plugins: ${{ steps.changes.outputs.plugins }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 检测变更的插件
        id: changes
        run: |
          echo "=== 检测插件变更 ==="
          echo "当前提交: ${{ github.sha }}"
          echo "上一个提交: ${{ github.event.before }}"
          
          # 获取变更的文件列表
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          echo "变更的文件:"
          echo "$CHANGED_FILES"
          
          # 检测变更的插件
          CHANGED_PLUGINS=""
          
          # 检查每个插件目录
          for plugin_dir in foxel-*; do
            if [ -d "$plugin_dir" ]; then
              echo "检查插件目录: $plugin_dir"
              if echo "$CHANGED_FILES" | grep -q "^$plugin_dir/"; then
                echo "✅ 检测到插件变更: $plugin_dir"
                if [ -z "$CHANGED_PLUGINS" ]; then
                  CHANGED_PLUGINS="$plugin_dir"
                else
                  CHANGED_PLUGINS="$CHANGED_PLUGINS,$plugin_dir"
                fi
              else
                echo "❌ 插件无变更: $plugin_dir"
              fi
            fi
          done
          
          echo "=== 最终结果 ==="
          echo "变更的插件: $CHANGED_PLUGINS"
          echo "plugins=$CHANGED_PLUGINS" >> $GITHUB_OUTPUT

  build-code-viewer:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: contains(needs.detect-changes.outputs.plugins, 'foxel-code-viewer')
    permissions:
      contents: write
      pull-requests: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: foxel-code-viewer/package-lock.json
      
      - name: 安装依赖
        run: |
          cd foxel-code-viewer
          npm ci
      
      - name: 设置固定版本
        run: |
          cd foxel-code-viewer
          
          # 设置固定版本为 latest
          echo "设置版本为: latest"
          echo "NEW_VERSION=latest" >> $GITHUB_ENV
      
      - name: 构建插件
        run: |
          cd foxel-code-viewer
          npm run build
      
      - name: 验证插件
        run: |
          cd foxel-code-viewer
          npm run validate
      
      - name: 生成发布说明
        id: release-notes
        run: |
          cd foxel-code-viewer
          
          # 获取上次发布的版本
          LAST_TAG=$(git describe --tags --match="foxel-code-viewer@*" --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            # 如果没有找到标签，从项目开始查找
            COMMITS=$(git log --oneline --grep="^feat(foxel-code-viewer):" --grep="^fix(foxel-code-viewer):" --grep="^perf(foxel-code-viewer):" --grep="^refactor(foxel-code-viewer):" --grep="^style(foxel-code-viewer):" --grep="^docs(foxel-code-viewer):" --grep="^test(foxel-code-viewer):" --grep="^chore(foxel-code-viewer):" --since="1 year ago" --pretty=format:"%s")
          else
            # 从上次标签开始查找
            COMMITS=$(git log --oneline $LAST_TAG..HEAD --grep="^feat(foxel-code-viewer):" --grep="^fix(foxel-code-viewer):" --grep="^perf(foxel-code-viewer):" --grep="^refactor(foxel-code-viewer):" --grep="^style(foxel-code-viewer):" --grep="^docs(foxel-code-viewer):" --grep="^test(foxel-code-viewer):" --grep="^chore(foxel-code-viewer):" --pretty=format:"%s")
          fi
          
          # 生成发布说明
          RELEASE_NOTES="## 🚀 最新版本更新内容\n\n"
          
          if [ -n "$COMMITS" ]; then
            echo "$COMMITS" | while read -r commit; do
              if [ -n "$commit" ]; then
                # 提取提交类型和描述
                TYPE=$(echo "$commit" | sed -n 's/^\([^(]*\)([^)]*):.*/\1/p')
                DESC=$(echo "$commit" | sed -n 's/^[^(]*([^)]*): \(.*\)/\1/p')
                
                case "$TYPE" in
                  "feat")
                    RELEASE_NOTES="$RELEASE_NOTES- ✨ 新功能: $DESC\n"
                    ;;
                  "fix")
                    RELEASE_NOTES="$RELEASE_NOTES- 🐛 修复: $DESC\n"
                    ;;
                  "perf")
                    RELEASE_NOTES="$RELEASE_NOTES- ⚡ 性能优化: $DESC\n"
                    ;;
                  "refactor")
                    RELEASE_NOTES="$RELEASE_NOTES- 🔧 重构: $DESC\n"
                    ;;
                  "style")
                    RELEASE_NOTES="$RELEASE_NOTES- 💄 样式更新: $DESC\n"
                    ;;
                  "docs")
                    RELEASE_NOTES="$RELEASE_NOTES- 📚 文档更新: $DESC\n"
                    ;;
                  "test")
                    RELEASE_NOTES="$RELEASE_NOTES- 🧪 测试更新: $DESC\n"
                    ;;
                  "chore")
                    RELEASE_NOTES="$RELEASE_NOTES- 🔨 构建更新: $DESC\n"
                    ;;
                  *)
                    RELEASE_NOTES="$RELEASE_NOTES- 📝 其他: $DESC\n"
                    ;;
                esac
              fi
            done
          else
            RELEASE_NOTES="$RELEASE_NOTES- 📦 自动版本更新\n"
          fi
          
          RELEASE_NOTES="$RELEASE_NOTES\n## 📦 安装方式\n\n1. 下载 \`plugin.js\` 文件\n2. 在 Foxel 的"应用"页面安装插件\n3. 选择对应的文件类型即可使用\n\n## 🔗 相关链接\n\n- [项目主页](https://github.com/maxage/foxel-plus)\n- [问题反馈](https://github.com/maxage/foxel-plus/issues)\n- [功能建议](https://github.com/maxage/foxel-plus/discussions)"
          
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo -e "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: 创建 Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: foxel-code-viewer@latest
          name: foxel-code-viewer latest
          body: ${{ steps.release-notes.outputs.body }}
          files: ./foxel-code-viewer/dist/plugin.js
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 复制到根目录
        run: |
          cp ./foxel-code-viewer/dist/plugin.js ./foxel-code-viewer.js
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add ./foxel-code-viewer.js
          git commit -m "chore: 更新 foxel-code-viewer 构建产物到 latest" || exit 0
          git pull --rebase origin main
          git push origin main

  build-image-viewer:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: contains(needs.detect-changes.outputs.plugins, 'foxel-image-viewer')
    permissions:
      contents: write
      pull-requests: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: foxel-image-viewer/package-lock.json
      
      - name: 安装依赖
        run: |
          cd foxel-image-viewer
          npm ci
      
      - name: 设置固定版本
        run: |
          cd foxel-image-viewer
          
          # 设置固定版本为 latest
          echo "设置版本为: latest"
          echo "NEW_VERSION=latest" >> $GITHUB_ENV
      
      - name: 构建插件
        run: |
          cd foxel-image-viewer
          npm run build
      
      - name: 验证插件
        run: |
          cd foxel-image-viewer
          npm run validate
      
      - name: 生成发布说明
        id: release-notes
        run: |
          cd foxel-image-viewer
          
          # 获取上次发布的版本
          LAST_TAG=$(git describe --tags --match="foxel-image-viewer@*" --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            # 如果没有找到标签，从项目开始查找
            COMMITS=$(git log --oneline --grep="^feat(foxel-image-viewer):" --grep="^fix(foxel-image-viewer):" --grep="^perf(foxel-image-viewer):" --grep="^refactor(foxel-image-viewer):" --grep="^style(foxel-image-viewer):" --grep="^docs(foxel-image-viewer):" --grep="^test(foxel-image-viewer):" --grep="^chore(foxel-image-viewer):" --since="1 year ago" --pretty=format:"%s")
          else
            # 从上次标签开始查找
            COMMITS=$(git log --oneline $LAST_TAG..HEAD --grep="^feat(foxel-image-viewer):" --grep="^fix(foxel-image-viewer):" --grep="^perf(foxel-image-viewer):" --grep="^refactor(foxel-image-viewer):" --grep="^style(foxel-image-viewer):" --grep="^docs(foxel-image-viewer):" --grep="^test(foxel-image-viewer):" --grep="^chore(foxel-image-viewer):" --pretty=format:"%s")
          fi
          
          # 生成发布说明
          RELEASE_NOTES="## 🚀 最新版本更新内容\n\n"
          
          if [ -n "$COMMITS" ]; then
            echo "$COMMITS" | while read -r commit; do
              if [ -n "$commit" ]; then
                # 提取提交类型和描述
                TYPE=$(echo "$commit" | sed -n 's/^\([^(]*\)([^)]*):.*/\1/p')
                DESC=$(echo "$commit" | sed -n 's/^[^(]*([^)]*): \(.*\)/\1/p')
                
                case "$TYPE" in
                  "feat")
                    RELEASE_NOTES="$RELEASE_NOTES- ✨ 新功能: $DESC\n"
                    ;;
                  "fix")
                    RELEASE_NOTES="$RELEASE_NOTES- 🐛 修复: $DESC\n"
                    ;;
                  "perf")
                    RELEASE_NOTES="$RELEASE_NOTES- ⚡ 性能优化: $DESC\n"
                    ;;
                  "refactor")
                    RELEASE_NOTES="$RELEASE_NOTES- 🔧 重构: $DESC\n"
                    ;;
                  "style")
                    RELEASE_NOTES="$RELEASE_NOTES- 💄 样式更新: $DESC\n"
                    ;;
                  "docs")
                    RELEASE_NOTES="$RELEASE_NOTES- 📚 文档更新: $DESC\n"
                    ;;
                  "test")
                    RELEASE_NOTES="$RELEASE_NOTES- 🧪 测试更新: $DESC\n"
                    ;;
                  "chore")
                    RELEASE_NOTES="$RELEASE_NOTES- 🔨 构建更新: $DESC\n"
                    ;;
                  *)
                    RELEASE_NOTES="$RELEASE_NOTES- 📝 其他: $DESC\n"
                    ;;
                esac
              fi
            done
          else
            RELEASE_NOTES="$RELEASE_NOTES- 📦 自动版本更新\n"
          fi
          
          RELEASE_NOTES="$RELEASE_NOTES\n## 📦 安装方式\n\n1. 下载 \`plugin.js\` 文件\n2. 在 Foxel 的"应用"页面安装插件\n3. 选择对应的文件类型即可使用\n\n## 🔗 相关链接\n\n- [项目主页](https://github.com/maxage/foxel-plus)\n- [问题反馈](https://github.com/maxage/foxel-plus/issues)\n- [功能建议](https://github.com/maxage/foxel-plus/discussions)"
          
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo -e "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: 创建 Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: foxel-image-viewer@latest
          name: foxel-image-viewer latest
          body: ${{ steps.release-notes.outputs.body }}
          files: ./foxel-image-viewer/dist/plugin.js
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 复制到根目录
        run: |
          cp ./foxel-image-viewer/dist/plugin.js ./foxel-image-viewer.js
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add ./foxel-image-viewer.js
          git commit -m "chore: 更新 foxel-image-viewer 构建产物到 latest" || exit 0
          git pull --rebase origin main
          git push origin main

  build-media-player:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: contains(needs.detect-changes.outputs.plugins, 'foxel-media-player')
    permissions:
      contents: write
      pull-requests: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: foxel-media-player/package-lock.json
      
      - name: 安装依赖
        run: |
          cd foxel-media-player
          npm ci
      
      - name: 设置固定版本
        run: |
          cd foxel-media-player
          
          # 设置固定版本为 latest
          echo "设置版本为: latest"
          echo "NEW_VERSION=latest" >> $GITHUB_ENV
      
      - name: 构建插件
        run: |
          cd foxel-media-player
          npm run build
      
      - name: 验证插件
        run: |
          cd foxel-media-player
          npm run validate
      
      - name: 生成发布说明
        id: release-notes
        run: |
          cd foxel-media-player
          
          # 获取上次发布的版本
          LAST_TAG=$(git describe --tags --match="foxel-media-player@*" --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            # 如果没有找到标签，从项目开始查找
            COMMITS=$(git log --oneline --grep="^feat(foxel-media-player):" --grep="^fix(foxel-media-player):" --grep="^perf(foxel-media-player):" --grep="^refactor(foxel-media-player):" --grep="^style(foxel-media-player):" --grep="^docs(foxel-media-player):" --grep="^test(foxel-media-player):" --grep="^chore(foxel-media-player):" --since="1 year ago" --pretty=format:"%s")
          else
            # 从上次标签开始查找
            COMMITS=$(git log --oneline $LAST_TAG..HEAD --grep="^feat(foxel-media-player):" --grep="^fix(foxel-media-player):" --grep="^perf(foxel-media-player):" --grep="^refactor(foxel-media-player):" --grep="^style(foxel-media-player):" --grep="^docs(foxel-media-player):" --grep="^test(foxel-media-player):" --grep="^chore(foxel-media-player):" --pretty=format:"%s")
          fi
          
          # 生成发布说明
          RELEASE_NOTES="## 🚀 最新版本更新内容\n\n"
          
          if [ -n "$COMMITS" ]; then
            echo "$COMMITS" | while read -r commit; do
              if [ -n "$commit" ]; then
                # 提取提交类型和描述
                TYPE=$(echo "$commit" | sed -n 's/^\([^(]*\)([^)]*):.*/\1/p')
                DESC=$(echo "$commit" | sed -n 's/^[^(]*([^)]*): \(.*\)/\1/p')
                
                case "$TYPE" in
                  "feat")
                    RELEASE_NOTES="$RELEASE_NOTES- ✨ 新功能: $DESC\n"
                    ;;
                  "fix")
                    RELEASE_NOTES="$RELEASE_NOTES- 🐛 修复: $DESC\n"
                    ;;
                  "perf")
                    RELEASE_NOTES="$RELEASE_NOTES- ⚡ 性能优化: $DESC\n"
                    ;;
                  "refactor")
                    RELEASE_NOTES="$RELEASE_NOTES- 🔧 重构: $DESC\n"
                    ;;
                  "style")
                    RELEASE_NOTES="$RELEASE_NOTES- 💄 样式更新: $DESC\n"
                    ;;
                  "docs")
                    RELEASE_NOTES="$RELEASE_NOTES- 📚 文档更新: $DESC\n"
                    ;;
                  "test")
                    RELEASE_NOTES="$RELEASE_NOTES- 🧪 测试更新: $DESC\n"
                    ;;
                  "chore")
                    RELEASE_NOTES="$RELEASE_NOTES- 🔨 构建更新: $DESC\n"
                    ;;
                  *)
                    RELEASE_NOTES="$RELEASE_NOTES- 📝 其他: $DESC\n"
                    ;;
                esac
              fi
            done
          else
            RELEASE_NOTES="$RELEASE_NOTES- 📦 自动版本更新\n"
          fi
          
          RELEASE_NOTES="$RELEASE_NOTES\n## 📦 安装方式\n\n1. 下载 \`plugin.js\` 文件\n2. 在 Foxel 的"应用"页面安装插件\n3. 选择对应的文件类型即可使用\n\n## 🔗 相关链接\n\n- [项目主页](https://github.com/maxage/foxel-plus)\n- [问题反馈](https://github.com/maxage/foxel-plus/issues)\n- [功能建议](https://github.com/maxage/foxel-plus/discussions)"
          
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo -e "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: 创建 Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: foxel-media-player@latest
          name: foxel-media-player latest
          body: ${{ steps.release-notes.outputs.body }}
          files: ./foxel-media-player/dist/plugin.js
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 复制到根目录
        run: |
          cp ./foxel-media-player/dist/plugin.js ./foxel-media-player.js
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add ./foxel-media-player.js
          git commit -m "chore: 更新 foxel-media-player 构建产物到 latest" || exit 0
          git pull --rebase origin main
          git push origin main

  build-ebook-reader:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: contains(needs.detect-changes.outputs.plugins, 'foxel-ebook-reader')
    permissions:
      contents: write
      pull-requests: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: foxel-ebook-reader/package-lock.json
      
      - name: 安装依赖
        run: |
          cd foxel-ebook-reader
          npm ci
      
      - name: 设置固定版本
        run: |
          cd foxel-ebook-reader
          echo "设置版本为: latest"
          echo "NEW_VERSION=latest" >> $GITHUB_ENV
      
      - name: 构建插件
        run: |
          cd foxel-ebook-reader
          npm run build
      
      - name: 验证插件
        run: |
          cd foxel-ebook-reader
          npm run validate
      
      - name: 生成发布说明
        id: release-notes
        run: |
          cd foxel-ebook-reader
          LAST_TAG=$(git describe --tags --match="foxel-ebook-reader@*" --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --oneline --grep="^feat(foxel-ebook-reader):" --grep="^fix(foxel-ebook-reader):" --grep="^perf(foxel-ebook-reader):" --grep="^refactor(foxel-ebook-reader):" --grep="^style(foxel-ebook-reader):" --grep="^docs(foxel-ebook-reader):" --grep="^test(foxel-ebook-reader):" --grep="^chore(foxel-ebook-reader):" --since="1 year ago" --pretty=format:"%s")
          else
            COMMITS=$(git log --oneline $LAST_TAG..HEAD --grep="^feat(foxel-ebook-reader):" --grep="^fix(foxel-ebook-reader):" --grep="^perf(foxel-ebook-reader):" --grep="^refactor(foxel-ebook-reader):" --grep="^style(foxel-ebook-reader):" --grep="^docs(foxel-ebook-reader):" --grep="^test(foxel-ebook-reader):" --grep="^chore(foxel-ebook-reader):" --pretty=format:"%s")
          fi
          RELEASE_NOTES="## 📚 图书阅读器最新更新\n\n"
          if [ -n "$COMMITS" ]; then
            echo "$COMMITS" | while read -r commit; do
              if [ -n "$commit" ]; then
                TYPE=$(echo "$commit" | sed -n 's/^\([^(]*\)([^)]*):.*/\1/p')
                DESC=$(echo "$commit" | sed -n 's/^[^(]*([^)]*): \(.*\)/\1/p')
                case "$TYPE" in
                  "feat")
                    RELEASE_NOTES="$RELEASE_NOTES- ✨ 新功能: $DESC\n"
                    ;;
                  "fix")
                    RELEASE_NOTES="$RELEASE_NOTES- 🐛 修复: $DESC\n"
                    ;;
                  "perf")
                    RELEASE_NOTES="$RELEASE_NOTES- ⚡ 性能优化: $DESC\n"
                    ;;
                  "refactor")
                    RELEASE_NOTES="$RELEASE_NOTES- 🔧 重构: $DESC\n"
                    ;;
                  "style")
                    RELEASE_NOTES="$RELEASE_NOTES- 💄 样式更新: $DESC\n"
                    ;;
                  "docs")
                    RELEASE_NOTES="$RELEASE_NOTES- 📚 文档更新: $DESC\n"
                    ;;
                  "test")
                    RELEASE_NOTES="$RELEASE_NOTES- 🧪 测试更新: $DESC\n"
                    ;;
                  "chore")
                    RELEASE_NOTES="$RELEASE_NOTES- 🔨 构建更新: $DESC\n"
                    ;;
                  *)
                    RELEASE_NOTES="$RELEASE_NOTES- 📝 其他: $DESC\n"
                    ;;
                esac
              fi
            done
          else
            RELEASE_NOTES="$RELEASE_NOTES- 📦 自动版本更新\n"
          fi
          RELEASE_NOTES="$RELEASE_NOTES\n## 📦 安装方式\n\n1. 下载 \`plugin.js\` 文件\n2. 在 Foxel 的\"应用\"页面安装插件\n3. 选择对应的文件类型即可使用\n\n## 🔗 相关链接\n\n- [项目主页](https://github.com/maxage/foxel-plus)\n- [问题反馈](https://github.com/maxage/foxel-plus/issues)\n- [功能建议](https://github.com/maxage/foxel-plus/discussions)"
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo -e "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: 创建 Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: foxel-ebook-reader@latest
          name: foxel-ebook-reader latest
          body: ${{ steps.release-notes.outputs.body }}
          files: ./foxel-ebook-reader/dist/plugin.js
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 复制到根目录
        run: |
          cp ./foxel-ebook-reader/dist/plugin.js ./foxel-ebook-reader.js
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add ./foxel-ebook-reader.js
          git commit -m "chore: 更新 foxel-ebook-reader 构建产物到 latest" || exit 0
          git pull --rebase origin main
          git push origin main
