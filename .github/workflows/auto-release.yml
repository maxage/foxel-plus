name: Auto Release Plugin

on:
  push:
    paths:
      - 'foxel-*/**'
    branches:
      - main
  workflow_dispatch:

jobs:
  auto-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Required for diffing and log history
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Detect changed plugins
      id: detect-plugins
      run: |
        echo "🔍 Detecting changed plugins..."
        CHANGED_DIRS=$(git diff --name-only HEAD~1 HEAD | grep '^foxel-.*/' | xargs -n 1 dirname | sort -u)
        
        if [ -z "$CHANGED_DIRS" ]; then
          echo "No plugin changes detected in directories."
          echo "changed=false" >> $GITHUB_OUTPUT
        else
          echo "📦 Changed plugin directories found: $CHANGED_DIRS"
          PLUGINS_STRING=$(echo $CHANGED_DIRS | tr '\n' ' ')
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "plugins=${PLUGINS_STRING}" >> $GITHUB_OUTPUT
        fi
        
    - name: Process and Release Changed Plugins
      if: steps.detect-plugins.outputs.changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        for plugin_dir in ${{ steps.detect-plugins.outputs.plugins }}; do
          if [ -d "$plugin_dir" ] && [ -f "$plugin_dir/package.json" ]; then
            echo "--- Processing plugin: $plugin_dir ---"
            cd "$plugin_dir"

            # Get current version and find the last tag for this plugin
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            LAST_TAG=$(git tag --list "$plugin_dir-v*" | sort -V | tail -n 1)
            
            # Bump version
            npm version patch -m "chore(release): %s"
            
            # Get new version and define new tag
            NEW_VERSION=$(node -p "require('./package.json').version")
            NEW_TAG="$plugin_dir-v$NEW_VERSION"
            echo "🚀 New version for $plugin_dir: $NEW_VERSION"

            # Generate Release Notes from commit messages
            echo "📝 Generating release notes..."
            RELEASE_NOTES="## 本次更新内容\n\n"
            if [ -z "$LAST_TAG" ]; then
              # If no previous tag, get all commits for this plugin's directory
              COMMITS=$(git log --pretty=format:"- %s" -- "$plugin_dir")
            else
              # Get commits since the last tag for this plugin's directory
              COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s" -- "$plugin_dir")
            fi
            
            if [ -z "$COMMITS" ]; then
              RELEASE_NOTES+="本次发布无具体的提交说明。"
            else
              RELEASE_NOTES+="$COMMITS"
            fi
            echo -e "$RELEASE_NOTES" # For logging

            # Build plugin
            echo "🔨 Building plugin..."
            npm ci
            npm run build
            
            # Create GitHub Release
            echo "📦 Creating GitHub Release for $NEW_TAG..."
            gh release create "$NEW_TAG" \
              --title "$plugin_dir v$NEW_VERSION" \
              --notes-file <(echo -e "$RELEASE_NOTES") \
              "dist/plugin.js"

            cd ..
            echo "✅ Successfully processed and released $plugin_dir."
          fi
        done

        # Push all version bumps and tags at once
        echo "⬆️ Pushing version changes and tags to repository..."
        git push --follow-tags
        echo "🎉 All changed plugins have been released."
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
