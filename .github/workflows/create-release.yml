name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'
      prerelease:
        description: 'Mark as prerelease'
        required: false
        default: false
        type: boolean

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Update plugin version
      run: |
        echo "📦 Updating plugin version to ${{ inputs.version }}"
        
        # 提取版本号（去掉 v 前缀）
        VERSION="${{ inputs.version }}"
        if [[ $VERSION == v* ]]; then
          VERSION=${VERSION#v}
        fi
        
        echo "📝 Version: $VERSION"
        
        # 更新所有插件的 package.json
        for plugin_dir in foxel-*/; do
          if [ -d "$plugin_dir" ] && [ -f "$plugin_dir/package.json" ]; then
            echo "🔄 Updating $plugin_dir package.json"
            cd "$plugin_dir"
            
            # 使用 npm version 命令更新版本号
            npm version "$VERSION" --no-git-tag-version
            
            echo "✅ Updated $plugin_dir to version $VERSION"
            cd ..
          fi
        done
        
    - name: Build all plugins
      run: |
        echo "🔨 Building all plugins..."
        
        # 构建所有插件
        for plugin_dir in foxel-*/; do
          if [ -d "$plugin_dir" ] && [ -f "$plugin_dir/package.json" ]; then
            echo "📦 Building plugin: $plugin_dir"
            cd "$plugin_dir"
            npm ci
            npm run build
            cd ..
            echo "✅ Plugin $plugin_dir built successfully"
          fi
        done
        
    - name: Prepare release files
      run: |
        mkdir -p release
        
        # 复制所有插件的构建文件
        for plugin_dir in foxel-*/; do
          if [ -d "$plugin_dir" ] && [ -f "$plugin_dir/dist/plugin.js" ]; then
            plugin_name=$(basename "$plugin_dir")
            echo "📁 Copying $plugin_name/dist/plugin.js to release/"
            cp "$plugin_dir/dist/plugin.js" "release/$plugin_name.js"
          fi
        done
        
        # 获取实际版本号
        VERSION="${{ inputs.version }}"
        if [[ $VERSION == v* ]]; then
          VERSION=${VERSION#v}
        fi
        
        # Create release notes
        cat > release/RELEASE_NOTES.md << EOF
        # 🎉 Foxel Plus 发布说明
        
        ## 📦 包含的插件
        
        EOF
        
        # Add plugin information dynamically
        for plugin_dir in foxel-*/; do
          if [ -d "$plugin_dir" ] && [ -f "$plugin_dir/package.json" ]; then
            plugin_name=$(basename "$plugin_dir")
            PLUGIN_NAME=$(node -p "require('./$plugin_dir/package.json').name")
            PLUGIN_DESCRIPTION=$(node -p "require('./$plugin_dir/package.json').description")
            PLUGIN_AUTHOR=$(node -p "require('./$plugin_dir/package.json').author")
            FILE_SIZE=$(du -h "release/$plugin_name.js" | cut -f1)
            
            # 根据插件类型添加不同的功能描述
            if [[ "$plugin_name" == *"image"* ]]; then
              PLUGIN_ICON="🖼️"
              PLUGIN_FEATURES="- 🔍 智能缩放（10%-500%）
        - 🖱️ 拖拽移动
        - 🔄 旋转和翻转
        - ⤢ 全屏模式
        - ℹ️ 图片信息显示
        - ⌨️ 键盘快捷键支持
        - 🎛️ 智能工具栏
        - 🌙 深色主题
        - 📱 响应式设计"
              SUPPORTED_FORMATS="JPG, PNG, GIF, BMP, WebP, SVG, ICO, TIFF"
            elif [[ "$plugin_name" == *"code"* ]]; then
              PLUGIN_ICON="💻"
              PLUGIN_FEATURES="- 🎨 语法高亮（50+ 语言）
        - 🌈 5 种主题切换
        - 🔍 实时搜索功能
        - 📝 代码折叠和行号
        - ⚙️ 字体大小调节
        - 📋 复制和下载功能
        - ⌨️ 完整键盘快捷键
        - 🎛️ 智能工具栏
        - 📱 响应式设计"
              SUPPORTED_FORMATS="JS/TS, HTML/CSS, Python, Java, C/C++, Go, Rust, 等 50+ 格式"
            elif [[ "$plugin_name" == *"ebook"* ]]; then
              PLUGIN_ICON="📚"
              PLUGIN_FEATURES="- 📖 滚动/分页模式切换
        - 🗂️ 智能目录与章节导航
        - 🎨 主题、字号、行距自定义
        - 🔍 全文搜索与高亮
        - 📌 书签与阅读进度持久化
        - 📥 EPUB 资源内联加载
        - 📄 浏览器内置 PDF 播放
        - ⌨️ 快捷键导航"
              SUPPORTED_FORMATS="TXT, Markdown, HTML, EPUB, PDF"
            else
              PLUGIN_ICON="🔌"
              PLUGIN_FEATURES="- 🎯 即插即用
        - 🔧 完全自包含
        - 🎨 现代化 UI
        - 📱 响应式设计"
              SUPPORTED_FORMATS="多种文件格式"
            fi
            
            cat >> release/RELEASE_NOTES.md << EOF
        ### $PLUGIN_ICON $PLUGIN_NAME (v$VERSION)
        
        **描述**: $PLUGIN_DESCRIPTION  
        **作者**: $PLUGIN_AUTHOR  
        **文件大小**: $FILE_SIZE  
        **支持格式**: $SUPPORTED_FORMATS
        
        #### 主要功能
        $PLUGIN_FEATURES
        
        #### 安装方法
        1. 下载 \`$plugin_name.js\` 文件
        2. 将文件复制到 Foxel 的 \`web/public/plugins/\` 目录
        3. 在 Foxel 的"应用"页面安装插件
        4. 选择对应文件类型即可使用
        
        #### 技术特性
        - **完全自包含** - 单文件输出，无外部依赖
        - **类型安全** - 基于 TypeScript 开发
        - **现代化 UI** - 使用 React 18 构建
        - **高性能** - ESBuild 优化构建
        - **即插即用** - 符合 Foxel 插件规范
        
        EOF
          fi
        done
        
        # Add common sections
        cat >> release/RELEASE_NOTES.md << EOF
        
        ## 🚀 安装方法
        
        1. 下载所需的插件文件
        2. 在 Foxel 的"应用"页面添加插件
        3. 输入对应的插件 URL
        4. 安装完成后即可使用
        
        ## 🔧 技术特性
        
        - **完全自包含** - 单文件输出，无外部依赖
        - **类型安全** - 基于 TypeScript 开发
        - **现代化 UI** - 使用 React 18 构建
        - **高性能** - ESBuild 优化构建
        - **即插即用** - 符合 Foxel 插件规范
        
        ## 📝 更新日志
        
        - 版本 $VERSION 更新
        - 修复了 TypeScript 类型错误
        - 优化了插件构建流程
        - 增强了错误处理机制
        - 改进了用户体验
        
        ---
        
        **自动构建**: 此版本由 GitHub Actions 自动构建和发布  
        **构建时间**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        EOF
        
        echo "📋 Release files prepared:"
        ls -la release/
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ inputs.version }}
        name: Foxel Plus Plugins ${{ inputs.version }}
        files: release/*.js
        body_path: release/RELEASE_NOTES.md
        draft: false
        prerelease: ${{ inputs.prerelease }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Update root plugin files
      run: |
        echo "📁 Updating root plugin files..."
        
        # 复制所有插件的构建文件到根目录
        for plugin_dir in foxel-*/; do
          if [ -d "$plugin_dir" ] && [ -f "$plugin_dir/dist/plugin.js" ]; then
            plugin_name=$(basename "$plugin_dir")
            echo "📋 Copying $plugin_name/dist/plugin.js to root as $plugin_name.js"
            cp "$plugin_dir/dist/plugin.js" "$plugin_name.js"
          fi
        done

        echo "✅ Root plugin files updated"

    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add foxel-*.js
        git commit -m "chore(foxel-plugins): 更新根目录插件文件 ${{ inputs.version }}" || exit 0
        git push
